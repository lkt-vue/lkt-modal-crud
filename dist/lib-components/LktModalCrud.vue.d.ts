import { LktObject } from "lkt-ts-interfaces";
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    palette: string;
    size: string;
    preTitle: string;
    showClose: boolean;
    disabledClose: boolean;
    disabledVeilClick: boolean;
    modalName: string;
    modalKey: string;
    zIndex: number;
    editedCloseConfirm: string;
    editedCloseConfirmKey: string | number;
    beforeClose: Function | undefined;
    modelValue: LktObject;
    title: string;
    editModeText: string;
    saveText: string;
    dropText: string;
    hiddenSave: boolean;
    hiddenDrop: boolean;
    hiddenButtons: boolean;
    readResource: string;
    createResource: string;
    updateResource: string;
    dropResource: string;
    readData: LktObject;
    createData: LktObject;
    updateData: LktObject;
    dropData: LktObject;
    isCreate: boolean;
    createConfirm: string;
    updateConfirm: string;
    dropConfirm: string;
    createConfirmData: LktObject;
    updateConfirmData: LktObject;
    dropConfirmData: LktObject;
    createDisabled: boolean;
    updateDisabled: boolean;
    dropDisabled: boolean;
    saveValidator: Function;
    beforeEmitUpdate: Function | undefined;
    onCreate: Function | undefined;
    onUpdate: Function | undefined;
    insideModal: boolean;
    dataStateConfig: LktObject;
    onCreateModalCallbacks: LktObject[];
    onUpdateModalCallbacks: LktObject[];
    onDropModalCallbacks: LktObject[];
}>, {
    palette: string;
    size: string;
    preTitle: string;
    showClose: boolean;
    disabledClose: boolean;
    disabledVeilClick: boolean;
    modalName: string;
    modalKey: string;
    zIndex: number;
    editedCloseConfirm: string;
    editedCloseConfirmKey: string;
    beforeClose: undefined;
    modelValue: () => {};
    title: string;
    editModeText: string;
    saveText: string;
    dropText: string;
    hiddenSave: boolean;
    hiddenDrop: boolean;
    hiddenButtons: boolean;
    readResource: string;
    createResource: string;
    updateResource: string;
    dropResource: string;
    readData: () => {};
    createData: () => {};
    updateData: () => {};
    dropData: () => {};
    isCreate: boolean;
    createConfirm: string;
    updateConfirm: string;
    dropConfirm: string;
    createConfirmData: () => {};
    updateConfirmData: () => {};
    dropConfirmData: () => {};
    createDisabled: boolean;
    updateDisabled: boolean;
    dropDisabled: boolean;
    saveValidator: () => true;
    beforeEmitUpdate: undefined;
    onCreate: undefined;
    onUpdate: undefined;
    insideModal: boolean;
    dataStateConfig: () => {};
    onCreateModalCallbacks: () => never[];
    onUpdateModalCallbacks: () => never[];
    onDropModalCallbacks: () => never[];
}>, {
    doRefresh: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    drop: (...args: any[]) => void;
    update: (...args: any[]) => void;
    "update:modelValue": (...args: any[]) => void;
    read: (...args: any[]) => void;
    create: (...args: any[]) => void;
    perms: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    palette: string;
    size: string;
    preTitle: string;
    showClose: boolean;
    disabledClose: boolean;
    disabledVeilClick: boolean;
    modalName: string;
    modalKey: string;
    zIndex: number;
    editedCloseConfirm: string;
    editedCloseConfirmKey: string | number;
    beforeClose: Function | undefined;
    modelValue: LktObject;
    title: string;
    editModeText: string;
    saveText: string;
    dropText: string;
    hiddenSave: boolean;
    hiddenDrop: boolean;
    hiddenButtons: boolean;
    readResource: string;
    createResource: string;
    updateResource: string;
    dropResource: string;
    readData: LktObject;
    createData: LktObject;
    updateData: LktObject;
    dropData: LktObject;
    isCreate: boolean;
    createConfirm: string;
    updateConfirm: string;
    dropConfirm: string;
    createConfirmData: LktObject;
    updateConfirmData: LktObject;
    dropConfirmData: LktObject;
    createDisabled: boolean;
    updateDisabled: boolean;
    dropDisabled: boolean;
    saveValidator: Function;
    beforeEmitUpdate: Function | undefined;
    onCreate: Function | undefined;
    onUpdate: Function | undefined;
    insideModal: boolean;
    dataStateConfig: LktObject;
    onCreateModalCallbacks: LktObject[];
    onUpdateModalCallbacks: LktObject[];
    onDropModalCallbacks: LktObject[];
}>, {
    palette: string;
    size: string;
    preTitle: string;
    showClose: boolean;
    disabledClose: boolean;
    disabledVeilClick: boolean;
    modalName: string;
    modalKey: string;
    zIndex: number;
    editedCloseConfirm: string;
    editedCloseConfirmKey: string;
    beforeClose: undefined;
    modelValue: () => {};
    title: string;
    editModeText: string;
    saveText: string;
    dropText: string;
    hiddenSave: boolean;
    hiddenDrop: boolean;
    hiddenButtons: boolean;
    readResource: string;
    createResource: string;
    updateResource: string;
    dropResource: string;
    readData: () => {};
    createData: () => {};
    updateData: () => {};
    dropData: () => {};
    isCreate: boolean;
    createConfirm: string;
    updateConfirm: string;
    dropConfirm: string;
    createConfirmData: () => {};
    updateConfirmData: () => {};
    dropConfirmData: () => {};
    createDisabled: boolean;
    updateDisabled: boolean;
    dropDisabled: boolean;
    saveValidator: () => true;
    beforeEmitUpdate: undefined;
    onCreate: undefined;
    onUpdate: undefined;
    insideModal: boolean;
    dataStateConfig: () => {};
    onCreateModalCallbacks: () => never[];
    onUpdateModalCallbacks: () => never[];
    onDropModalCallbacks: () => never[];
}>>> & {
    onDrop?: ((...args: any[]) => any) | undefined;
    onCreate?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onRead?: ((...args: any[]) => any) | undefined;
    onPerms?: ((...args: any[]) => any) | undefined;
}, {
    zIndex: number;
    title: string;
    size: string;
    palette: string;
    preTitle: string;
    showClose: boolean;
    disabledClose: boolean;
    disabledVeilClick: boolean;
    modalName: string;
    modalKey: string;
    editedCloseConfirm: string;
    editedCloseConfirmKey: string | number;
    beforeClose: Function | undefined;
    modelValue: LktObject;
    editModeText: string;
    saveText: string;
    dropText: string;
    hiddenSave: boolean;
    hiddenDrop: boolean;
    hiddenButtons: boolean;
    readResource: string;
    createResource: string;
    updateResource: string;
    dropResource: string;
    readData: LktObject;
    createData: LktObject;
    updateData: LktObject;
    dropData: LktObject;
    isCreate: boolean;
    createConfirm: string;
    updateConfirm: string;
    dropConfirm: string;
    createConfirmData: LktObject;
    updateConfirmData: LktObject;
    dropConfirmData: LktObject;
    createDisabled: boolean;
    updateDisabled: boolean;
    dropDisabled: boolean;
    saveValidator: Function;
    beforeEmitUpdate: Function | undefined;
    onCreate: Function | undefined;
    onUpdate: Function | undefined;
    insideModal: boolean;
    dataStateConfig: LktObject;
    onCreateModalCallbacks: LktObject[];
    onUpdateModalCallbacks: LktObject[];
    onDropModalCallbacks: LktObject[];
}, {}>, {
    "pre-title"?(_: {
        item: any;
        loading: any;
        editMode: any;
        isCreate: any;
        canUpdate: any;
        canDrop: any;
    }): any;
    item?(_: {
        item: any;
        loading: any;
        editMode: any;
        isCreate: any;
        canUpdate: any;
        canDrop: any;
        itemBeingEdited: any;
    }): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
